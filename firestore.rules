rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - public profiles
    match /users/{userId} {
      // Allow reading user profiles (for search)
      allow read: if request.auth != null;
      // Users can only write their own profile
      allow write: if request.auth.uid == userId;
      // Allow querying users by username
      match /{document=**} {
        allow list: if request.auth != null &&
          request.query.limit != null &&
          request.query.where.fieldPath == 'username';
      }
    }

    // Contacts collection - only owner can access
    match /contacts/{docId} {
      // Owner can read/update/delete their own contact docs
      allow read, update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      // Allow creation when the userId in the NEW doc matches the requester
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
    }
    // Messages collection - allow querying by chatId and ensure proper access
    match /messages/{messageId} {
      // Helper function to check if user is part of the chat
      function isParticipant(chatId) {
        // Chat ID format: "user1_user2" (sorted)
        return chatId.matches('^' + request.auth.uid + '_.*$') || 
               chatId.matches('^.*_' + request.auth.uid + '$');
      }
      
      // Allow read if user is part of the chat
      allow read: if request.auth != null && 
        isParticipant(resource.data.chatId);
        
      // Allow create if user is authenticated and the message is from them
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.uid &&
        isParticipant(request.resource.data.chatId);
        
      // Allow listing messages for a chat
      allow list: if request.auth != null &&
        request.query.where.chatId.stringValue != null &&
        isParticipant(request.query.where.chatId.stringValue);
    }

    // Users collection - public profiles
    match /users/{userId} {
      // Allow reading user profiles (for search)
      allow read: if request.auth != null;
      // Users can only write their own profile
      allow write: if request.auth.uid == userId;
      
      // Allow querying users by username
      match /{document=**} {
        allow list: if request.auth != null &&
          request.query.limit != null &&
          request.query.where.fieldPath == 'username';
      }
    }

    // Contacts collection - only owner can access
    match /contacts/{docId} {
      // Owner can read/update/delete their own contact docs
      allow read, update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      // Allow creation when the userId in the NEW doc matches the requester
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
    }

    // Invites - any authenticated user
    match /invites/{inviteId} {
      allow read, write: if request.auth != null;
    }
    
    // Contact Requests
    match /contactRequests/{requestId} {
      // Allow users to see requests they've sent or received
      allow read: if request.auth != null && 
        (resource.data.fromUid == request.auth.uid || 
         resource.data.toUid == request.auth.uid);
         
      // Allow creating a request if you're the sender
      allow create: if request.auth != null &&
        request.resource.data.fromUid == request.auth.uid &&
        request.resource.data.status == 'pending';
        
      // Allow updating only if you're the recipient and only status field
      allow update: if request.auth != null &&
        resource.data.toUid == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
        (request.resource.data.status == 'accepted' || 
         request.resource.data.status == 'rejected');
    }
  }
}